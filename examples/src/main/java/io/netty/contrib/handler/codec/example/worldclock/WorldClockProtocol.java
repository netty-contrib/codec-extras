/*
 * Copyright 2013 The Netty Project
 *
 * The Netty Project licenses this file to you under the Apache License,
 * version 2.0 (the "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at:
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/main/java/io/netty/example/worldclock/WorldClockProtocol.proto
package io.netty.contrib.handler.codec.example.worldclock;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.Descriptors.EnumDescriptor;
import com.google.protobuf.Descriptors.EnumValueDescriptor;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.Internal.EnumLiteMap;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.UnknownFieldSet;

import static java.util.Objects.requireNonNull;

@SuppressWarnings("all")
public final class WorldClockProtocol {
    private static Descriptors.Descriptor internal_static_io_netty_example_worldclock_Location_descriptor;
    private static GeneratedMessage.FieldAccessorTable internal_static_io_netty_example_worldclock_Location_fieldAccessorTable;
    private static Descriptors.Descriptor internal_static_io_netty_example_worldclock_Locations_descriptor;
    private static GeneratedMessage.FieldAccessorTable internal_static_io_netty_example_worldclock_Locations_fieldAccessorTable;
    private static Descriptors.Descriptor internal_static_io_netty_example_worldclock_LocalTime_descriptor;
    private static GeneratedMessage.FieldAccessorTable internal_static_io_netty_example_worldclock_LocalTime_fieldAccessorTable;
    private static Descriptors.Descriptor internal_static_io_netty_example_worldclock_LocalTimes_descriptor;
    private static GeneratedMessage.FieldAccessorTable internal_static_io_netty_example_worldclock_LocalTimes_fieldAccessorTable;
    private static Descriptors.FileDescriptor descriptor;

    static {
        String[] descriptorData = {"\nBsrc/main/java/io/netty/example/worldcl" + "ock/WorldClockProtocol.proto\022\033io.netty.e" + "xample.worldclock\"S\n\010Location\0229\n\tcontine" + "nt\030\001 \002(\0162&.C" + "ontinent\022\014\n\004city\030\002 \002(\t\"D\n\tLocations\0227\n\010l" + "ocation\030\001 \003(\0132%.io.netty.example.worldcl" + "ock.Location\"\245\001\n\tLocalTime\022\014\n\004year\030\001 \002(\r" + "\022\r\n\005month\030\002 \002(\r\022\022\n\ndayOfMonth\030\004 \002(\r\0229\n\td" + "ayOfWeek\030\005 \002(\0162&.io.netty.example.worldc" + "lock.DayOfWeek\022\014\n\004hour\030\006 \002(\r\022\016\n\006minute\030\007", " \002(\r\022\016\n\006second\030\010 \002(\r\"G\n\nLocalTimes\0229\n\tlo" + "calTime\030\001 \003(\0132&.io.netty.example.worldcl" + "ock.LocalTime*\231\001\n\tContinent\022\n\n\006AFRICA\020\000\022" + "\013\n\007AMERICA\020\001\022\016\n\nANTARCTICA\020\002\022\n\n\006ARCTIC\020\003" + "\022\010\n\004ASIA\020\004\022\014\n\010ATLANTIC\020\005\022\r\n\tAUSTRALIA\020\006\022" + "\n\n\006EUROPE\020\007\022\n\n\006INDIAN\020\010\022\013\n\007MIDEAST\020\t\022\013\n\007" + "PACIFIC\020\n*g\n\tDayOfWeek\022\n\n\006SUNDAY\020\001\022\n\n\006MO" + "NDAY\020\002\022\013\n\007TUESDAY\020\003\022\r\n\tWEDNESDAY\020\004\022\014\n\010TH" + "URSDAY\020\005\022\n\n\006FRIDAY\020\006\022\014\n\010SATURDAY\020\007B\002H\001"};
        Descriptors.FileDescriptor.InternalDescriptorAssigner assigner = new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            @Override
            public ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor root) {
                descriptor = root;
                internal_static_io_netty_example_worldclock_Location_descriptor = getDescriptor().getMessageTypes().get(0);
                internal_static_io_netty_example_worldclock_Location_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_io_netty_example_worldclock_Location_descriptor, new String[]{"Continent", "City",});
                internal_static_io_netty_example_worldclock_Locations_descriptor = getDescriptor().getMessageTypes().get(1);
                internal_static_io_netty_example_worldclock_Locations_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_io_netty_example_worldclock_Locations_descriptor, new String[]{"Location",});
                internal_static_io_netty_example_worldclock_LocalTime_descriptor = getDescriptor().getMessageTypes().get(2);
                internal_static_io_netty_example_worldclock_LocalTime_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_io_netty_example_worldclock_LocalTime_descriptor, new String[]{"Year", "Month", "DayOfMonth", "DayOfWeek", "Hour", "Minute", "Second",});
                internal_static_io_netty_example_worldclock_LocalTimes_descriptor = getDescriptor().getMessageTypes().get(3);
                internal_static_io_netty_example_worldclock_LocalTimes_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(internal_static_io_netty_example_worldclock_LocalTimes_descriptor, new String[]{"LocalTime",});
                return null;
            }
        };
        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{}, assigner);
    }

    private WorldClockProtocol() {
    }

    public static void registerAllExtensions(ExtensionRegistry registry) {
    }

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }
    /**
     * Protobuf enum {@code io.netty.example.worldclock.Continent}
     */
    public enum Continent implements ProtocolMessageEnum {
        /**
         * <code>AFRICA = 0;</code>
         */
        AFRICA(0, 0),
        /**
         * <code>AMERICA = 1;</code>
         */
        AMERICA(1, 1),
        /**
         * <code>ANTARCTICA = 2;</code>
         */
        ANTARCTICA(2, 2),
        /**
         * <code>ARCTIC = 3;</code>
         */
        ARCTIC(3, 3),
        /**
         * <code>ASIA = 4;</code>
         */
        ASIA(4, 4),
        /**
         * <code>ATLANTIC = 5;</code>
         */
        ATLANTIC(5, 5),
        /**
         * <code>AUSTRALIA = 6;</code>
         */
        AUSTRALIA(6, 6),
        /**
         * <code>EUROPE = 7;</code>
         */
        EUROPE(7, 7),
        /**
         * <code>INDIAN = 8;</code>
         */
        INDIAN(8, 8),
        /**
         * <code>MIDEAST = 9;</code>
         */
        MIDEAST(9, 9),
        /**
         * <code>PACIFIC = 10;</code>
         */
        PACIFIC(10, 10),
        ;

        /**
         * <code>AFRICA = 0;</code>
         */
        public static final int AFRICA_VALUE = 0;
        /**
         * <code>AMERICA = 1;</code>
         */
        public static final int AMERICA_VALUE = 1;
        /**
         * <code>ANTARCTICA = 2;</code>
         */
        public static final int ANTARCTICA_VALUE = 2;
        /**
         * <code>ARCTIC = 3;</code>
         */
        public static final int ARCTIC_VALUE = 3;
        /**
         * <code>ASIA = 4;</code>
         */
        public static final int ASIA_VALUE = 4;
        /**
         * <code>ATLANTIC = 5;</code>
         */
        public static final int ATLANTIC_VALUE = 5;
        /**
         * <code>AUSTRALIA = 6;</code>
         */
        public static final int AUSTRALIA_VALUE = 6;
        /**
         * <code>EUROPE = 7;</code>
         */
        public static final int EUROPE_VALUE = 7;
        /**
         * <code>INDIAN = 8;</code>
         */
        public static final int INDIAN_VALUE = 8;
        /**
         * <code>MIDEAST = 9;</code>
         */
        public static final int MIDEAST_VALUE = 9;
        /**
         * <code>PACIFIC = 10;</code>
         */
        public static final int PACIFIC_VALUE = 10;
        private static final Continent[] VALUES = values();
        private static EnumLiteMap<Continent> internalValueMap = new EnumLiteMap<Continent>() {
            @Override
            public Continent findValueByNumber(int number) {
                return Continent.valueOf(number);
            }
        };
        private final int index;
        private final int value;

        private Continent(int index, int value) {
            this.index = index;
            this.value = value;
        }

        public static Continent valueOf(int value) {
            switch (value) {
                case 0:
                    return AFRICA;
                case 1:
                    return AMERICA;
                case 2:
                    return ANTARCTICA;
                case 3:
                    return ARCTIC;
                case 4:
                    return ASIA;
                case 5:
                    return ATLANTIC;
                case 6:
                    return AUSTRALIA;
                case 7:
                    return EUROPE;
                case 8:
                    return INDIAN;
                case 9:
                    return MIDEAST;
                case 10:
                    return PACIFIC;
                default:
                    return null;
            }
        }

        public static EnumLiteMap<Continent> internalGetValueMap() {
            return internalValueMap;
        }

        public static final EnumDescriptor getDescriptor() {
            return WorldClockProtocol.getDescriptor().getEnumTypes().get(0);
        }

        public static Continent valueOf(EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        @Override
        public final int getNumber() {
            return value;
        }

        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        // @@protoc_insertion_point(enum_scope:Continent)
    }
    /**
     * Protobuf enum {@code DayOfWeek}
     */
    public enum DayOfWeek implements ProtocolMessageEnum {
        /**
         * <code>SUNDAY = 1;</code>
         */
        SUNDAY(0, 1),
        /**
         * <code>MONDAY = 2;</code>
         */
        MONDAY(1, 2),
        /**
         * <code>TUESDAY = 3;</code>
         */
        TUESDAY(2, 3),
        /**
         * <code>WEDNESDAY = 4;</code>
         */
        WEDNESDAY(3, 4),
        /**
         * <code>THURSDAY = 5;</code>
         */
        THURSDAY(4, 5),
        /**
         * <code>FRIDAY = 6;</code>
         */
        FRIDAY(5, 6),
        /**
         * <code>SATURDAY = 7;</code>
         */
        SATURDAY(6, 7),
        ;

        /**
         * <code>SUNDAY = 1;</code>
         */
        public static final int SUNDAY_VALUE = 1;
        /**
         * <code>MONDAY = 2;</code>
         */
        public static final int MONDAY_VALUE = 2;
        /**
         * <code>TUESDAY = 3;</code>
         */
        public static final int TUESDAY_VALUE = 3;
        /**
         * <code>WEDNESDAY = 4;</code>
         */
        public static final int WEDNESDAY_VALUE = 4;
        /**
         * <code>THURSDAY = 5;</code>
         */
        public static final int THURSDAY_VALUE = 5;
        /**
         * <code>FRIDAY = 6;</code>
         */
        public static final int FRIDAY_VALUE = 6;
        /**
         * <code>SATURDAY = 7;</code>
         */
        public static final int SATURDAY_VALUE = 7;
        private static final DayOfWeek[] VALUES = values();
        private static EnumLiteMap<DayOfWeek> internalValueMap = new EnumLiteMap<DayOfWeek>() {
            @Override
            public DayOfWeek findValueByNumber(int number) {
                return DayOfWeek.valueOf(number);
            }
        };
        private final int index;
        private final int value;

        private DayOfWeek(int index, int value) {
            this.index = index;
            this.value = value;
        }

        public static DayOfWeek valueOf(int value) {
            switch (value) {
                case 1:
                    return SUNDAY;
                case 2:
                    return MONDAY;
                case 3:
                    return TUESDAY;
                case 4:
                    return WEDNESDAY;
                case 5:
                    return THURSDAY;
                case 6:
                    return FRIDAY;
                case 7:
                    return SATURDAY;
                default:
                    return null;
            }
        }

        public static EnumLiteMap<DayOfWeek> internalGetValueMap() {
            return internalValueMap;
        }

        public static final EnumDescriptor getDescriptor() {
            return WorldClockProtocol.getDescriptor().getEnumTypes().get(1);
        }

        public static DayOfWeek valueOf(EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            }
            return VALUES[desc.getIndex()];
        }

        @Override
        public final int getNumber() {
            return value;
        }

        @Override
        public final EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(index);
        }

        @Override
        public final EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        // @@protoc_insertion_point(enum_scope:DayOfWeek)
    }
    public interface LocationOrBuilder extends MessageOrBuilder {

        // required .Continent continent = 1;

        /**
         * <code>required .Continent continent = 1;</code>
         */
        boolean hasContinent();

        /**
         * <code>required .Continent continent = 1;</code>
         */
        Continent getContinent();

        // required string city = 2;

        /**
         * <code>required string city = 2;</code>
         */
        boolean hasCity();

        /**
         * <code>required string city = 2;</code>
         */
        String getCity();

        /**
         * <code>required string city = 2;</code>
         */
        ByteString getCityBytes();
    }
    public interface LocationsOrBuilder extends MessageOrBuilder {

        // repeated .Location location = 1;

        /**
         * <code>repeated .Location location = 1;</code>
         */
        java.util.List<WorldClockProtocol.Location> getLocationList();

        /**
         * <code>repeated .Location location = 1;</code>
         */
        WorldClockProtocol.Location getLocation(int index);

        /**
         * <code>repeated .Location location = 1;</code>
         */
        int getLocationCount();

        /**
         * <code>repeated .Location location = 1;</code>
         */
        java.util.List<? extends WorldClockProtocol.LocationOrBuilder> getLocationOrBuilderList();

        /**
         * <code>repeated .Location location = 1;</code>
         */
        WorldClockProtocol.LocationOrBuilder getLocationOrBuilder(int index);
    }
    public interface LocalTimeOrBuilder extends MessageOrBuilder {

        // required uint32 year = 1;

        /**
         * <code>required uint32 year = 1;</code>
         */
        boolean hasYear();

        /**
         * <code>required uint32 year = 1;</code>
         */
        int getYear();

        // required uint32 month = 2;

        /**
         * <code>required uint32 month = 2;</code>
         */
        boolean hasMonth();

        /**
         * <code>required uint32 month = 2;</code>
         */
        int getMonth();

        // required uint32 dayOfMonth = 4;

        /**
         * <code>required uint32 dayOfMonth = 4;</code>
         */
        boolean hasDayOfMonth();

        /**
         * <code>required uint32 dayOfMonth = 4;</code>
         */
        int getDayOfMonth();

        // required .DayOfWeek dayOfWeek = 5;

        /**
         * <code>required .DayOfWeek dayOfWeek = 5;</code>
         */
        boolean hasDayOfWeek();

        /**
         * <code>required .DayOfWeek dayOfWeek = 5;</code>
         */
        WorldClockProtocol.DayOfWeek getDayOfWeek();

        // required uint32 hour = 6;

        /**
         * <code>required uint32 hour = 6;</code>
         */
        boolean hasHour();

        /**
         * <code>required uint32 hour = 6;</code>
         */
        int getHour();

        // required uint32 minute = 7;

        /**
         * <code>required uint32 minute = 7;</code>
         */
        boolean hasMinute();

        /**
         * <code>required uint32 minute = 7;</code>
         */
        int getMinute();

        // required uint32 second = 8;

        /**
         * <code>required uint32 second = 8;</code>
         */
        boolean hasSecond();

        /**
         * <code>required uint32 second = 8;</code>
         */
        int getSecond();
    }
    public interface LocalTimesOrBuilder extends MessageOrBuilder {

        // repeated .LocalTime localTime = 1;

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        java.util.List<WorldClockProtocol.LocalTime> getLocalTimeList();

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        WorldClockProtocol.LocalTime getLocalTime(int index);

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        int getLocalTimeCount();

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        java.util.List<? extends WorldClockProtocol.LocalTimeOrBuilder> getLocalTimeOrBuilderList();

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        WorldClockProtocol.LocalTimeOrBuilder getLocalTimeOrBuilder(int index);
    }

    /**
     * Protobuf type {@code Location}
     */
    public static final class Location extends GeneratedMessage implements LocationOrBuilder {
        // required .Continent continent = 1;
        public static final int CONTINENT_FIELD_NUMBER = 1;
        // required string city = 2;
        public static final int CITY_FIELD_NUMBER = 2;
        private static final Location defaultInstance;
        private static final long serialVersionUID = 0L;
        public static Parser<Location> PARSER = new AbstractParser<Location>() {
            @Override
            public Location parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new Location(input, extensionRegistry);
            }
        };

        static {
            defaultInstance = new Location(true);
            defaultInstance.initFields();
        }

        private final UnknownFieldSet unknownFields;
        private int bitField0_;
        private WorldClockProtocol.Continent continent_;
        private Object city_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;

        // Use Location.newBuilder() to construct.
        private Location(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }
        private Location(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }
        private Location(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            int rawValue = input.readEnum();
                            WorldClockProtocol.Continent value = WorldClockProtocol.Continent.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(1, rawValue);
                            } else {
                                bitField0_ |= 0x00000001;
                                continent_ = value;
                            }
                            break;
                        }
                        case 18: {
                            bitField0_ |= 0x00000002;
                            city_ = input.readBytes();
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static Location getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_Location_descriptor;
        }

        public static WorldClockProtocol.Location parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.Location parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.Location parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.Location parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.Location parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.Location parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.Location parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static WorldClockProtocol.Location parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.Location parseFrom(CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.Location parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(WorldClockProtocol.Location prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        @Override
        public Location getDefaultInstanceForType() {
            return defaultInstance;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_Location_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.Location.class, WorldClockProtocol.Location.Builder.class);
        }

        @Override
        public Parser<Location> getParserForType() {
            return PARSER;
        }

        /**
         * <code>required .Continent continent = 1;</code>
         */
        @Override
        public boolean hasContinent() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .Continent continent = 1;</code>
         */
        @Override
        public WorldClockProtocol.Continent getContinent() {
            return continent_;
        }

        /**
         * <code>required string city = 2;</code>
         */
        @Override
        public boolean hasCity() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required string city = 2;</code>
         */
        @Override
        public String getCity() {
            Object ref = city_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs = (ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    city_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string city = 2;</code>
         */
        @Override
        public ByteString getCityBytes() {
            Object ref = city_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String) ref);
                city_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        private void initFields() {
            continent_ = WorldClockProtocol.Continent.AFRICA;
            city_ = "";
        }

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasContinent()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasCity()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeEnum(1, continent_.getNumber());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeBytes(2, getCityBytes());
            }
            getUnknownFields().writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += CodedOutputStream.computeEnumSize(1, continent_.getNumber());
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += CodedOutputStream.computeBytesSize(2, getCityBytes());
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Location}
         */
        public static final class Builder extends GeneratedMessage.Builder<Builder> implements WorldClockProtocol.LocationOrBuilder {
            private int bitField0_;
            // required .Continent continent = 1;
            private WorldClockProtocol.Continent continent_ = WorldClockProtocol.Continent.AFRICA;
            // required string city = 2;
            private Object city_ = "";

            // Construct using WorldClockProtocol.Location.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_Location_descriptor;
            }

            private static Builder create() {
                return new Builder();
            }

            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_Location_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.Location.class, WorldClockProtocol.Location.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                continent_ = WorldClockProtocol.Continent.AFRICA;
                bitField0_ = (bitField0_ & ~0x00000001);
                city_ = "";
                bitField0_ = (bitField0_ & ~0x00000002);
                return this;
            }

            @Override
            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_Location_descriptor;
            }

            @Override
            public WorldClockProtocol.Location getDefaultInstanceForType() {
                return WorldClockProtocol.Location.getDefaultInstance();
            }

            @Override
            public WorldClockProtocol.Location build() {
                WorldClockProtocol.Location result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public WorldClockProtocol.Location buildPartial() {
                WorldClockProtocol.Location result = new WorldClockProtocol.Location(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.continent_ = continent_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.city_ = city_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            @Override
            public Builder mergeFrom(Message other) {
                if (other instanceof WorldClockProtocol.Location) {
                    return mergeFrom((WorldClockProtocol.Location) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(WorldClockProtocol.Location other) {
                if (other == WorldClockProtocol.Location.getDefaultInstance()) return this;
                if (other.hasContinent()) {
                    setContinent(other.getContinent());
                }
                if (other.hasCity()) {
                    bitField0_ |= 0x00000002;
                    city_ = other.city_;
                    onChanged();
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            @Override
            public final boolean isInitialized() {
                if (!hasContinent()) {

                    return false;
                }
                if (!hasCity()) {

                    return false;
                }
                return true;
            }

            @Override
            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                WorldClockProtocol.Location parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (WorldClockProtocol.Location) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <code>required .Continent continent = 1;</code>
             */
            @Override
            public boolean hasContinent() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required .Continent continent = 1;</code>
             */
            @Override
            public WorldClockProtocol.Continent getContinent() {
                return continent_;
            }

            /**
             * <code>required .Continent continent = 1;</code>
             */
            public Builder setContinent(WorldClockProtocol.Continent value) {
                requireNonNull(value, "value");
                bitField0_ |= 0x00000001;
                continent_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required .Continent continent = 1;</code>
             */
            public Builder clearContinent() {
                bitField0_ = (bitField0_ & ~0x00000001);
                continent_ = WorldClockProtocol.Continent.AFRICA;
                onChanged();
                return this;
            }

            /**
             * <code>required string city = 2;</code>
             */
            @Override
            public boolean hasCity() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required string city = 2;</code>
             */
            @Override
            public String getCity() {
                Object ref = city_;
                if (!(ref instanceof String)) {
                    String s = ((ByteString) ref).toStringUtf8();
                    city_ = s;
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string city = 2;</code>
             */
            public Builder setCity(String value) {
                requireNonNull(value, "value");
                bitField0_ |= 0x00000002;
                city_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string city = 2;</code>
             */
            @Override
            public ByteString getCityBytes() {
                Object ref = city_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String) ref);
                    city_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }

            /**
             * <code>required string city = 2;</code>
             */
            public Builder setCityBytes(ByteString value) {
                requireNonNull(value, "value");
                bitField0_ |= 0x00000002;
                city_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required string city = 2;</code>
             */
            public Builder clearCity() {
                bitField0_ = (bitField0_ & ~0x00000002);
                city_ = getDefaultInstance().getCity();
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:Location)
        }

        // @@protoc_insertion_point(class_scope:Location)
    }

    /**
     * Protobuf type {@code Locations}
     */
    public static final class Locations extends GeneratedMessage implements LocationsOrBuilder {
        // repeated .Location location = 1;
        public static final int LOCATION_FIELD_NUMBER = 1;
        private static final Locations defaultInstance;
        private static final long serialVersionUID = 0L;
        public static Parser<Locations> PARSER = new AbstractParser<Locations>() {
            @Override
            public Locations parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new Locations(input, extensionRegistry);
            }
        };

        static {
            defaultInstance = new Locations(true);
            defaultInstance.initFields();
        }

        private final UnknownFieldSet unknownFields;
        private java.util.List<WorldClockProtocol.Location> location_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;

        // Use Locations.newBuilder() to construct.
        private Locations(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private Locations(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private Locations(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                location_ = new java.util.ArrayList<WorldClockProtocol.Location>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            location_.add(input.readMessage(WorldClockProtocol.Location.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    location_ = java.util.Collections.unmodifiableList(location_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static Locations getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_Locations_descriptor;
        }

        public static WorldClockProtocol.Locations parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.Locations parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.Locations parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.Locations parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.Locations parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.Locations parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.Locations parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static WorldClockProtocol.Locations parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.Locations parseFrom(CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.Locations parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(WorldClockProtocol.Locations prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        @Override
        public Locations getDefaultInstanceForType() {
            return defaultInstance;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_Locations_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.Locations.class, WorldClockProtocol.Locations.Builder.class);
        }

        @Override
        public Parser<Locations> getParserForType() {
            return PARSER;
        }

        /**
         * <code>repeated .Location location = 1;</code>
         */
        @Override
        public java.util.List<WorldClockProtocol.Location> getLocationList() {
            return location_;
        }

        /**
         * <code>repeated .Location location = 1;</code>
         */
        @Override
        public java.util.List<? extends WorldClockProtocol.LocationOrBuilder> getLocationOrBuilderList() {
            return location_;
        }

        /**
         * <code>repeated .Location location = 1;</code>
         */
        @Override
        public int getLocationCount() {
            return location_.size();
        }

        /**
         * <code>repeated .Location location = 1;</code>
         */
        @Override
        public WorldClockProtocol.Location getLocation(int index) {
            return location_.get(index);
        }

        /**
         * <code>repeated .Location location = 1;</code>
         */
        @Override
        public WorldClockProtocol.LocationOrBuilder getLocationOrBuilder(int index) {
            return location_.get(index);
        }

        private void initFields() {
            location_ = java.util.Collections.emptyList();
        }

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            for (int i = 0; i < getLocationCount(); i++) {
                if (!getLocation(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            for (int i = 0; i < location_.size(); i++) {
                output.writeMessage(1, location_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < location_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(1, location_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code Locations}
         */
        public static final class Builder extends GeneratedMessage.Builder<Builder> implements WorldClockProtocol.LocationsOrBuilder {
            private int bitField0_;
            // repeated .Location location = 1;
            private java.util.List<WorldClockProtocol.Location> location_ = java.util.Collections.emptyList();
            private RepeatedFieldBuilder<Location, Location.Builder, LocationOrBuilder> locationBuilder_;

            // Construct using WorldClockProtocol.Locations.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_Locations_descriptor;
            }

            private static Builder create() {
                return new Builder();
            }

            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_Locations_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.Locations.class, WorldClockProtocol.Locations.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessage.alwaysUseFieldBuilders) {
                    getLocationFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                if (locationBuilder_ == null) {
                    location_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    locationBuilder_.clear();
                }
                return this;
            }

            @Override
            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_Locations_descriptor;
            }

            @Override
            public WorldClockProtocol.Locations getDefaultInstanceForType() {
                return WorldClockProtocol.Locations.getDefaultInstance();
            }

            @Override
            public WorldClockProtocol.Locations build() {
                WorldClockProtocol.Locations result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public WorldClockProtocol.Locations buildPartial() {
                WorldClockProtocol.Locations result = new WorldClockProtocol.Locations(this);
                int from_bitField0_ = bitField0_;
                if (locationBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        location_ = java.util.Collections.unmodifiableList(location_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.location_ = location_;
                } else {
                    result.location_ = locationBuilder_.build();
                }
                onBuilt();
                return result;
            }

            @Override
            public Builder mergeFrom(Message other) {
                if (other instanceof WorldClockProtocol.Locations) {
                    return mergeFrom((WorldClockProtocol.Locations) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(WorldClockProtocol.Locations other) {
                if (other == WorldClockProtocol.Locations.getDefaultInstance()) return this;
                if (locationBuilder_ == null) {
                    if (!other.location_.isEmpty()) {
                        if (location_.isEmpty()) {
                            location_ = other.location_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureLocationIsMutable();
                            location_.addAll(other.location_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.location_.isEmpty()) {
                        if (locationBuilder_.isEmpty()) {
                            locationBuilder_.dispose();
                            locationBuilder_ = null;
                            location_ = other.location_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            locationBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getLocationFieldBuilder() : null;
                        } else {
                            locationBuilder_.addAllMessages(other.location_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            @Override
            public final boolean isInitialized() {
                for (int i = 0; i < getLocationCount(); i++) {
                    if (!getLocation(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            @Override
            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                WorldClockProtocol.Locations parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (WorldClockProtocol.Locations) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureLocationIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    location_ = new java.util.ArrayList<WorldClockProtocol.Location>(location_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            @Override
            public java.util.List<WorldClockProtocol.Location> getLocationList() {
                if (locationBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(location_);
                } else {
                    return locationBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            @Override
            public int getLocationCount() {
                if (locationBuilder_ == null) {
                    return location_.size();
                } else {
                    return locationBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            @Override
            public WorldClockProtocol.Location getLocation(int index) {
                if (locationBuilder_ == null) {
                    return location_.get(index);
                } else {
                    return locationBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder setLocation(int index, WorldClockProtocol.Location value) {
                if (locationBuilder_ == null) {
                    requireNonNull(value, "value");
                    ensureLocationIsMutable();
                    location_.set(index, value);
                    onChanged();
                } else {
                    locationBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder setLocation(int index, WorldClockProtocol.Location.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    ensureLocationIsMutable();
                    location_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    locationBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder addLocation(WorldClockProtocol.Location value) {
                if (locationBuilder_ == null) {
                    requireNonNull(value, "value");
                    ensureLocationIsMutable();
                    location_.add(value);
                    onChanged();
                } else {
                    locationBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder addLocation(int index, WorldClockProtocol.Location value) {
                if (locationBuilder_ == null) {
                    requireNonNull(value, "value");
                    ensureLocationIsMutable();
                    location_.add(index, value);
                    onChanged();
                } else {
                    locationBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder addLocation(WorldClockProtocol.Location.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    ensureLocationIsMutable();
                    location_.add(builderForValue.build());
                    onChanged();
                } else {
                    locationBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder addLocation(int index, WorldClockProtocol.Location.Builder builderForValue) {
                if (locationBuilder_ == null) {
                    ensureLocationIsMutable();
                    location_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    locationBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder addAllLocation(Iterable<? extends WorldClockProtocol.Location> values) {
                if (locationBuilder_ == null) {
                    ensureLocationIsMutable();
                    super.addAll(values, location_);
                    onChanged();
                } else {
                    locationBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder clearLocation() {
                if (locationBuilder_ == null) {
                    location_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    locationBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public Builder removeLocation(int index) {
                if (locationBuilder_ == null) {
                    ensureLocationIsMutable();
                    location_.remove(index);
                    onChanged();
                } else {
                    locationBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public WorldClockProtocol.Location.Builder getLocationBuilder(int index) {
                return getLocationFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            @Override
            public WorldClockProtocol.LocationOrBuilder getLocationOrBuilder(int index) {
                if (locationBuilder_ == null) {
                    return location_.get(index);
                } else {
                    return locationBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            @Override
            public java.util.List<? extends WorldClockProtocol.LocationOrBuilder> getLocationOrBuilderList() {
                if (locationBuilder_ != null) {
                    return locationBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(location_);
                }
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public WorldClockProtocol.Location.Builder addLocationBuilder() {
                return getLocationFieldBuilder().addBuilder(WorldClockProtocol.Location.getDefaultInstance());
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public WorldClockProtocol.Location.Builder addLocationBuilder(int index) {
                return getLocationFieldBuilder().addBuilder(index, WorldClockProtocol.Location.getDefaultInstance());
            }

            /**
             * <code>repeated .Location location = 1;</code>
             */
            public java.util.List<WorldClockProtocol.Location.Builder> getLocationBuilderList() {
                return getLocationFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<WorldClockProtocol.Location, WorldClockProtocol.Location.Builder, WorldClockProtocol.LocationOrBuilder> getLocationFieldBuilder() {
                if (locationBuilder_ == null) {
                    locationBuilder_ = new RepeatedFieldBuilder<WorldClockProtocol.Location, WorldClockProtocol.Location.Builder, WorldClockProtocol.LocationOrBuilder>(location_, ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(), isClean());
                    location_ = null;
                }
                return locationBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:Locations)
        }

        // @@protoc_insertion_point(class_scope:Locations)
    }

    /**
     * Protobuf type {@code LocalTime}
     */
    public static final class LocalTime extends GeneratedMessage implements LocalTimeOrBuilder {
        // required uint32 year = 1;
        public static final int YEAR_FIELD_NUMBER = 1;
        // required uint32 month = 2;
        public static final int MONTH_FIELD_NUMBER = 2;
        // required uint32 dayOfMonth = 4;
        public static final int DAYOFMONTH_FIELD_NUMBER = 4;
        // required .DayOfWeek dayOfWeek = 5;
        public static final int DAYOFWEEK_FIELD_NUMBER = 5;
        // required uint32 hour = 6;
        public static final int HOUR_FIELD_NUMBER = 6;
        // required uint32 minute = 7;
        public static final int MINUTE_FIELD_NUMBER = 7;
        // required uint32 second = 8;
        public static final int SECOND_FIELD_NUMBER = 8;
        private static final LocalTime defaultInstance;
        private static final long serialVersionUID = 0L;
        public static Parser<LocalTime> PARSER = new AbstractParser<LocalTime>() {
            @Override
            public LocalTime parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new LocalTime(input, extensionRegistry);
            }
        };

        static {
            defaultInstance = new LocalTime(true);
            defaultInstance.initFields();
        }

        private final UnknownFieldSet unknownFields;
        private int bitField0_;
        private int year_;
        private int month_;
        private int dayOfMonth_;
        private WorldClockProtocol.DayOfWeek dayOfWeek_;
        private int hour_;
        private int minute_;
        private int second_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;
        // Use LocalTime.newBuilder() to construct.
        private LocalTime(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private LocalTime(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private LocalTime(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 8: {
                            bitField0_ |= 0x00000001;
                            year_ = input.readUInt32();
                            break;
                        }
                        case 16: {
                            bitField0_ |= 0x00000002;
                            month_ = input.readUInt32();
                            break;
                        }
                        case 32: {
                            bitField0_ |= 0x00000004;
                            dayOfMonth_ = input.readUInt32();
                            break;
                        }
                        case 40: {
                            int rawValue = input.readEnum();
                            WorldClockProtocol.DayOfWeek value = WorldClockProtocol.DayOfWeek.valueOf(rawValue);
                            if (value == null) {
                                unknownFields.mergeVarintField(5, rawValue);
                            } else {
                                bitField0_ |= 0x00000008;
                                dayOfWeek_ = value;
                            }
                            break;
                        }
                        case 48: {
                            bitField0_ |= 0x00000010;
                            hour_ = input.readUInt32();
                            break;
                        }
                        case 56: {
                            bitField0_ |= 0x00000020;
                            minute_ = input.readUInt32();
                            break;
                        }
                        case 64: {
                            bitField0_ |= 0x00000040;
                            second_ = input.readUInt32();
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static LocalTime getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTime_descriptor;
        }

        public static WorldClockProtocol.LocalTime parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.LocalTime parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTime parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.LocalTime parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTime parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.LocalTime parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTime parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static WorldClockProtocol.LocalTime parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTime parseFrom(CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.LocalTime parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(WorldClockProtocol.LocalTime prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        @Override
        public LocalTime getDefaultInstanceForType() {
            return defaultInstance;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTime_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.LocalTime.class, WorldClockProtocol.LocalTime.Builder.class);
        }

        @Override
        public Parser<LocalTime> getParserForType() {
            return PARSER;
        }

        /**
         * <code>required uint32 year = 1;</code>
         */
        @Override
        public boolean hasYear() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required uint32 year = 1;</code>
         */
        @Override
        public int getYear() {
            return year_;
        }

        /**
         * <code>required uint32 month = 2;</code>
         */
        @Override
        public boolean hasMonth() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required uint32 month = 2;</code>
         */
        @Override
        public int getMonth() {
            return month_;
        }

        /**
         * <code>required uint32 dayOfMonth = 4;</code>
         */
        @Override
        public boolean hasDayOfMonth() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required uint32 dayOfMonth = 4;</code>
         */
        @Override
        public int getDayOfMonth() {
            return dayOfMonth_;
        }

        /**
         * <code>required .DayOfWeek dayOfWeek = 5;</code>
         */
        @Override
        public boolean hasDayOfWeek() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required .DayOfWeek dayOfWeek = 5;</code>
         */
        @Override
        public WorldClockProtocol.DayOfWeek getDayOfWeek() {
            return dayOfWeek_;
        }

        /**
         * <code>required uint32 hour = 6;</code>
         */
        @Override
        public boolean hasHour() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required uint32 hour = 6;</code>
         */
        @Override
        public int getHour() {
            return hour_;
        }

        /**
         * <code>required uint32 minute = 7;</code>
         */
        @Override
        public boolean hasMinute() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>required uint32 minute = 7;</code>
         */
        @Override
        public int getMinute() {
            return minute_;
        }

        /**
         * <code>required uint32 second = 8;</code>
         */
        @Override
        public boolean hasSecond() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>required uint32 second = 8;</code>
         */
        @Override
        public int getSecond() {
            return second_;
        }

        private void initFields() {
            year_ = 0;
            month_ = 0;
            dayOfMonth_ = 0;
            dayOfWeek_ = WorldClockProtocol.DayOfWeek.SUNDAY;
            hour_ = 0;
            minute_ = 0;
            second_ = 0;
        }

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            if (!hasYear()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMonth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDayOfMonth()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasDayOfWeek()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasHour()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasMinute()) {
                memoizedIsInitialized = 0;
                return false;
            }
            if (!hasSecond()) {
                memoizedIsInitialized = 0;
                return false;
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeUInt32(1, year_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                output.writeUInt32(2, month_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                output.writeUInt32(4, dayOfMonth_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                output.writeEnum(5, dayOfWeek_.getNumber());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                output.writeUInt32(6, hour_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                output.writeUInt32(7, minute_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                output.writeUInt32(8, second_);
            }
            getUnknownFields().writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += CodedOutputStream.computeUInt32Size(1, year_);
            }
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                size += CodedOutputStream.computeUInt32Size(2, month_);
            }
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                size += CodedOutputStream.computeUInt32Size(4, dayOfMonth_);
            }
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                size += CodedOutputStream.computeEnumSize(5, dayOfWeek_.getNumber());
            }
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                size += CodedOutputStream.computeUInt32Size(6, hour_);
            }
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                size += CodedOutputStream.computeUInt32Size(7, minute_);
            }
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                size += CodedOutputStream.computeUInt32Size(8, second_);
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code LocalTime}
         */
        public static final class Builder extends GeneratedMessage.Builder<Builder> implements WorldClockProtocol.LocalTimeOrBuilder {
            private int bitField0_;
            // required uint32 year = 1;
            private int year_;
            // required uint32 month = 2;
            private int month_;
            // required uint32 dayOfMonth = 4;
            private int dayOfMonth_;
            // required .DayOfWeek dayOfWeek = 5;
            private WorldClockProtocol.DayOfWeek dayOfWeek_ = WorldClockProtocol.DayOfWeek.SUNDAY;
            // required uint32 hour = 6;
            private int hour_;
            // required uint32 minute = 7;
            private int minute_;
            // required uint32 second = 8;
            private int second_;

            // Construct using WorldClockProtocol.LocalTime.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTime_descriptor;
            }

            private static Builder create() {
                return new Builder();
            }

            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTime_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.LocalTime.class, WorldClockProtocol.LocalTime.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessage.alwaysUseFieldBuilders) {
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                year_ = 0;
                bitField0_ = (bitField0_ & ~0x00000001);
                month_ = 0;
                bitField0_ = (bitField0_ & ~0x00000002);
                dayOfMonth_ = 0;
                bitField0_ = (bitField0_ & ~0x00000004);
                dayOfWeek_ = WorldClockProtocol.DayOfWeek.SUNDAY;
                bitField0_ = (bitField0_ & ~0x00000008);
                hour_ = 0;
                bitField0_ = (bitField0_ & ~0x00000010);
                minute_ = 0;
                bitField0_ = (bitField0_ & ~0x00000020);
                second_ = 0;
                bitField0_ = (bitField0_ & ~0x00000040);
                return this;
            }

            @Override
            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTime_descriptor;
            }

            @Override
            public WorldClockProtocol.LocalTime getDefaultInstanceForType() {
                return WorldClockProtocol.LocalTime.getDefaultInstance();
            }

            @Override
            public WorldClockProtocol.LocalTime build() {
                WorldClockProtocol.LocalTime result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public WorldClockProtocol.LocalTime buildPartial() {
                WorldClockProtocol.LocalTime result = new WorldClockProtocol.LocalTime(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.year_ = year_;
                if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                    to_bitField0_ |= 0x00000002;
                }
                result.month_ = month_;
                if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                    to_bitField0_ |= 0x00000004;
                }
                result.dayOfMonth_ = dayOfMonth_;
                if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                    to_bitField0_ |= 0x00000008;
                }
                result.dayOfWeek_ = dayOfWeek_;
                if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                    to_bitField0_ |= 0x00000010;
                }
                result.hour_ = hour_;
                if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                    to_bitField0_ |= 0x00000020;
                }
                result.minute_ = minute_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000040;
                }
                result.second_ = second_;
                result.bitField0_ = to_bitField0_;
                onBuilt();
                return result;
            }

            @Override
            public Builder mergeFrom(Message other) {
                if (other instanceof WorldClockProtocol.LocalTime) {
                    return mergeFrom((WorldClockProtocol.LocalTime) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(WorldClockProtocol.LocalTime other) {
                if (other == WorldClockProtocol.LocalTime.getDefaultInstance()) return this;
                if (other.hasYear()) {
                    setYear(other.getYear());
                }
                if (other.hasMonth()) {
                    setMonth(other.getMonth());
                }
                if (other.hasDayOfMonth()) {
                    setDayOfMonth(other.getDayOfMonth());
                }
                if (other.hasDayOfWeek()) {
                    setDayOfWeek(other.getDayOfWeek());
                }
                if (other.hasHour()) {
                    setHour(other.getHour());
                }
                if (other.hasMinute()) {
                    setMinute(other.getMinute());
                }
                if (other.hasSecond()) {
                    setSecond(other.getSecond());
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            @Override
            public final boolean isInitialized() {
                if (!hasYear()) {

                    return false;
                }
                if (!hasMonth()) {

                    return false;
                }
                if (!hasDayOfMonth()) {

                    return false;
                }
                if (!hasDayOfWeek()) {

                    return false;
                }
                if (!hasHour()) {

                    return false;
                }
                if (!hasMinute()) {

                    return false;
                }
                if (!hasSecond()) {

                    return false;
                }
                return true;
            }

            @Override
            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                WorldClockProtocol.LocalTime parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (WorldClockProtocol.LocalTime) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            /**
             * <code>required uint32 year = 1;</code>
             */
            @Override
            public boolean hasYear() {
                return ((bitField0_ & 0x00000001) == 0x00000001);
            }

            /**
             * <code>required uint32 year = 1;</code>
             */
            @Override
            public int getYear() {
                return year_;
            }

            /**
             * <code>required uint32 year = 1;</code>
             */
            public Builder setYear(int value) {
                bitField0_ |= 0x00000001;
                year_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 year = 1;</code>
             */
            public Builder clearYear() {
                bitField0_ = (bitField0_ & ~0x00000001);
                year_ = 0;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 month = 2;</code>
             */
            @Override
            public boolean hasMonth() {
                return ((bitField0_ & 0x00000002) == 0x00000002);
            }

            /**
             * <code>required uint32 month = 2;</code>
             */
            @Override
            public int getMonth() {
                return month_;
            }

            /**
             * <code>required uint32 month = 2;</code>
             */
            public Builder setMonth(int value) {
                bitField0_ |= 0x00000002;
                month_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 month = 2;</code>
             */
            public Builder clearMonth() {
                bitField0_ = (bitField0_ & ~0x00000002);
                month_ = 0;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 dayOfMonth = 4;</code>
             */
            @Override
            public boolean hasDayOfMonth() {
                return ((bitField0_ & 0x00000004) == 0x00000004);
            }

            /**
             * <code>required uint32 dayOfMonth = 4;</code>
             */
            @Override
            public int getDayOfMonth() {
                return dayOfMonth_;
            }

            /**
             * <code>required uint32 dayOfMonth = 4;</code>
             */
            public Builder setDayOfMonth(int value) {
                bitField0_ |= 0x00000004;
                dayOfMonth_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 dayOfMonth = 4;</code>
             */
            public Builder clearDayOfMonth() {
                bitField0_ = (bitField0_ & ~0x00000004);
                dayOfMonth_ = 0;
                onChanged();
                return this;
            }

            /**
             * <code>required .DayOfWeek dayOfWeek = 5;</code>
             */
            @Override
            public boolean hasDayOfWeek() {
                return ((bitField0_ & 0x00000008) == 0x00000008);
            }

            /**
             * <code>required .DayOfWeek dayOfWeek = 5;</code>
             */
            @Override
            public WorldClockProtocol.DayOfWeek getDayOfWeek() {
                return dayOfWeek_;
            }

            /**
             * <code>required .DayOfWeek dayOfWeek = 5;</code>
             */
            public Builder setDayOfWeek(WorldClockProtocol.DayOfWeek value) {
                requireNonNull(value, "value");
                bitField0_ |= 0x00000008;
                dayOfWeek_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required .DayOfWeek dayOfWeek = 5;</code>
             */
            public Builder clearDayOfWeek() {
                bitField0_ = (bitField0_ & ~0x00000008);
                dayOfWeek_ = WorldClockProtocol.DayOfWeek.SUNDAY;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 hour = 6;</code>
             */
            @Override
            public boolean hasHour() {
                return ((bitField0_ & 0x00000010) == 0x00000010);
            }

            /**
             * <code>required uint32 hour = 6;</code>
             */
            @Override
            public int getHour() {
                return hour_;
            }

            /**
             * <code>required uint32 hour = 6;</code>
             */
            public Builder setHour(int value) {
                bitField0_ |= 0x00000010;
                hour_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 hour = 6;</code>
             */
            public Builder clearHour() {
                bitField0_ = (bitField0_ & ~0x00000010);
                hour_ = 0;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 minute = 7;</code>
             */
            @Override
            public boolean hasMinute() {
                return ((bitField0_ & 0x00000020) == 0x00000020);
            }

            /**
             * <code>required uint32 minute = 7;</code>
             */
            @Override
            public int getMinute() {
                return minute_;
            }

            /**
             * <code>required uint32 minute = 7;</code>
             */
            public Builder setMinute(int value) {
                bitField0_ |= 0x00000020;
                minute_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 minute = 7;</code>
             */
            public Builder clearMinute() {
                bitField0_ = (bitField0_ & ~0x00000020);
                minute_ = 0;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 second = 8;</code>
             */
            @Override
            public boolean hasSecond() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required uint32 second = 8;</code>
             */
            @Override
            public int getSecond() {
                return second_;
            }

            /**
             * <code>required uint32 second = 8;</code>
             */
            public Builder setSecond(int value) {
                bitField0_ |= 0x00000040;
                second_ = value;
                onChanged();
                return this;
            }

            /**
             * <code>required uint32 second = 8;</code>
             */
            public Builder clearSecond() {
                bitField0_ = (bitField0_ & ~0x00000040);
                second_ = 0;
                onChanged();
                return this;
            }

            // @@protoc_insertion_point(builder_scope:LocalTime)
        }

        // @@protoc_insertion_point(class_scope:LocalTime)
    }

    /**
     * Protobuf type {@code LocalTimes}
     */
    public static final class LocalTimes extends GeneratedMessage implements LocalTimesOrBuilder {
        // repeated .LocalTime localTime = 1;
        public static final int LOCALTIME_FIELD_NUMBER = 1;
        private static final LocalTimes defaultInstance;
        private static final long serialVersionUID = 0L;
        public static Parser<LocalTimes> PARSER = new AbstractParser<LocalTimes>() {
            @Override
            public LocalTimes parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new LocalTimes(input, extensionRegistry);
            }
        };

        static {
            defaultInstance = new LocalTimes(true);
            defaultInstance.initFields();
        }

        private final UnknownFieldSet unknownFields;
        private java.util.List<WorldClockProtocol.LocalTime> localTime_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;

        // Use LocalTimes.newBuilder() to construct.
        private LocalTimes(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private LocalTimes(boolean noInit) {
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        private LocalTimes(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                localTime_ = new java.util.ArrayList<WorldClockProtocol.LocalTime>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            localTime_.add(input.readMessage(WorldClockProtocol.LocalTime.PARSER, extensionRegistry));
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (java.io.IOException e) {
                throw new InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    localTime_ = java.util.Collections.unmodifiableList(localTime_);
                }
                this.unknownFields = unknownFields.build();
                makeExtensionsImmutable();
            }
        }

        public static LocalTimes getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTimes_descriptor;
        }

        public static WorldClockProtocol.LocalTimes parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTimes parseDelimitedFrom(java.io.InputStream input) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static WorldClockProtocol.LocalTimes parseDelimitedFrom(java.io.InputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(CodedInputStream input) throws java.io.IOException {
            return PARSER.parseFrom(input);
        }

        public static WorldClockProtocol.LocalTimes parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(WorldClockProtocol.LocalTimes prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        @Override
        public LocalTimes getDefaultInstanceForType() {
            return defaultInstance;
        }

        @Override
        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        @Override
        protected FieldAccessorTable internalGetFieldAccessorTable() {
            return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTimes_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.LocalTimes.class, WorldClockProtocol.LocalTimes.Builder.class);
        }

        @Override
        public Parser<LocalTimes> getParserForType() {
            return PARSER;
        }

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        @Override
        public java.util.List<WorldClockProtocol.LocalTime> getLocalTimeList() {
            return localTime_;
        }

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        @Override
        public java.util.List<? extends WorldClockProtocol.LocalTimeOrBuilder> getLocalTimeOrBuilderList() {
            return localTime_;
        }

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        @Override
        public int getLocalTimeCount() {
            return localTime_.size();
        }

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        @Override
        public WorldClockProtocol.LocalTime getLocalTime(int index) {
            return localTime_.get(index);
        }

        /**
         * <code>repeated .LocalTime localTime = 1;</code>
         */
        @Override
        public WorldClockProtocol.LocalTimeOrBuilder getLocalTimeOrBuilder(int index) {
            return localTime_.get(index);
        }

        private void initFields() {
            localTime_ = java.util.Collections.emptyList();
        }

        @Override
        public final boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized != -1) return isInitialized == 1;

            for (int i = 0; i < getLocalTimeCount(); i++) {
                if (!getLocalTime(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output) throws java.io.IOException {
            getSerializedSize();
            for (int i = 0; i < localTime_.size(); i++) {
                output.writeMessage(1, localTime_.get(i));
            }
            getUnknownFields().writeTo(output);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < localTime_.size(); i++) {
                size += CodedOutputStream.computeMessageSize(1, localTime_.get(i));
            }
            size += getUnknownFields().getSerializedSize();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace() throws java.io.ObjectStreamException {
            return super.writeReplace();
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder toBuilder() {
            return newBuilder(this);
        }

        @Override
        protected Builder newBuilderForType(BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        /**
         * Protobuf type {@code LocalTimes}
         */
        public static final class Builder extends GeneratedMessage.Builder<Builder> implements WorldClockProtocol.LocalTimesOrBuilder {
            private int bitField0_;
            // repeated .LocalTime localTime = 1;
            private java.util.List<WorldClockProtocol.LocalTime> localTime_ = java.util.Collections.emptyList();
            private RepeatedFieldBuilder<WorldClockProtocol.LocalTime, WorldClockProtocol.LocalTime.Builder, WorldClockProtocol.LocalTimeOrBuilder> localTimeBuilder_;

            // Construct using WorldClockProtocol.LocalTimes.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private Builder(BuilderParent parent) {
                super(parent);
                maybeForceBuilderInitialization();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTimes_descriptor;
            }

            private static Builder create() {
                return new Builder();
            }

            @Override
            protected FieldAccessorTable internalGetFieldAccessorTable() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTimes_fieldAccessorTable.ensureFieldAccessorsInitialized(WorldClockProtocol.LocalTimes.class, WorldClockProtocol.LocalTimes.Builder.class);
            }

            private void maybeForceBuilderInitialization() {
                if (GeneratedMessage.alwaysUseFieldBuilders) {
                    getLocalTimeFieldBuilder();
                }
            }

            @Override
            public Builder clear() {
                super.clear();
                if (localTimeBuilder_ == null) {
                    localTime_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                } else {
                    localTimeBuilder_.clear();
                }
                return this;
            }

            @Override
            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            @Override
            public Descriptors.Descriptor getDescriptorForType() {
                return WorldClockProtocol.internal_static_io_netty_example_worldclock_LocalTimes_descriptor;
            }

            @Override
            public WorldClockProtocol.LocalTimes getDefaultInstanceForType() {
                return WorldClockProtocol.LocalTimes.getDefaultInstance();
            }

            @Override
            public WorldClockProtocol.LocalTimes build() {
                WorldClockProtocol.LocalTimes result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public WorldClockProtocol.LocalTimes buildPartial() {
                WorldClockProtocol.LocalTimes result = new WorldClockProtocol.LocalTimes(this);
                int from_bitField0_ = bitField0_;
                if (localTimeBuilder_ == null) {
                    if (((bitField0_ & 0x00000001) == 0x00000001)) {
                        localTime_ = java.util.Collections.unmodifiableList(localTime_);
                        bitField0_ = (bitField0_ & ~0x00000001);
                    }
                    result.localTime_ = localTime_;
                } else {
                    result.localTime_ = localTimeBuilder_.build();
                }
                onBuilt();
                return result;
            }

            @Override
            public Builder mergeFrom(Message other) {
                if (other instanceof WorldClockProtocol.LocalTimes) {
                    return mergeFrom((WorldClockProtocol.LocalTimes) other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(WorldClockProtocol.LocalTimes other) {
                if (other == WorldClockProtocol.LocalTimes.getDefaultInstance()) return this;
                if (localTimeBuilder_ == null) {
                    if (!other.localTime_.isEmpty()) {
                        if (localTime_.isEmpty()) {
                            localTime_ = other.localTime_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                        } else {
                            ensureLocalTimeIsMutable();
                            localTime_.addAll(other.localTime_);
                        }
                        onChanged();
                    }
                } else {
                    if (!other.localTime_.isEmpty()) {
                        if (localTimeBuilder_.isEmpty()) {
                            localTimeBuilder_.dispose();
                            localTimeBuilder_ = null;
                            localTime_ = other.localTime_;
                            bitField0_ = (bitField0_ & ~0x00000001);
                            localTimeBuilder_ = GeneratedMessage.alwaysUseFieldBuilders ? getLocalTimeFieldBuilder() : null;
                        } else {
                            localTimeBuilder_.addAllMessages(other.localTime_);
                        }
                    }
                }
                this.mergeUnknownFields(other.getUnknownFields());
                return this;
            }

            @Override
            public final boolean isInitialized() {
                for (int i = 0; i < getLocalTimeCount(); i++) {
                    if (!getLocalTime(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            @Override
            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws java.io.IOException {
                WorldClockProtocol.LocalTimes parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (WorldClockProtocol.LocalTimes) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureLocalTimeIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    localTime_ = new java.util.ArrayList<WorldClockProtocol.LocalTime>(localTime_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            @Override
            public java.util.List<WorldClockProtocol.LocalTime> getLocalTimeList() {
                if (localTimeBuilder_ == null) {
                    return java.util.Collections.unmodifiableList(localTime_);
                } else {
                    return localTimeBuilder_.getMessageList();
                }
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            @Override
            public int getLocalTimeCount() {
                if (localTimeBuilder_ == null) {
                    return localTime_.size();
                } else {
                    return localTimeBuilder_.getCount();
                }
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            @Override
            public WorldClockProtocol.LocalTime getLocalTime(int index) {
                if (localTimeBuilder_ == null) {
                    return localTime_.get(index);
                } else {
                    return localTimeBuilder_.getMessage(index);
                }
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder setLocalTime(int index, WorldClockProtocol.LocalTime value) {
                if (localTimeBuilder_ == null) {
                    requireNonNull(value, "value");
                    ensureLocalTimeIsMutable();
                    localTime_.set(index, value);
                    onChanged();
                } else {
                    localTimeBuilder_.setMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder setLocalTime(int index, WorldClockProtocol.LocalTime.Builder builderForValue) {
                if (localTimeBuilder_ == null) {
                    ensureLocalTimeIsMutable();
                    localTime_.set(index, builderForValue.build());
                    onChanged();
                } else {
                    localTimeBuilder_.setMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder addLocalTime(WorldClockProtocol.LocalTime value) {
                if (localTimeBuilder_ == null) {
                    requireNonNull(value, "value");
                    ensureLocalTimeIsMutable();
                    localTime_.add(value);
                    onChanged();
                } else {
                    localTimeBuilder_.addMessage(value);
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder addLocalTime(int index, WorldClockProtocol.LocalTime value) {
                if (localTimeBuilder_ == null) {
                    requireNonNull(value, "value");
                    ensureLocalTimeIsMutable();
                    localTime_.add(index, value);
                    onChanged();
                } else {
                    localTimeBuilder_.addMessage(index, value);
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder addLocalTime(WorldClockProtocol.LocalTime.Builder builderForValue) {
                if (localTimeBuilder_ == null) {
                    ensureLocalTimeIsMutable();
                    localTime_.add(builderForValue.build());
                    onChanged();
                } else {
                    localTimeBuilder_.addMessage(builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder addLocalTime(int index, WorldClockProtocol.LocalTime.Builder builderForValue) {
                if (localTimeBuilder_ == null) {
                    ensureLocalTimeIsMutable();
                    localTime_.add(index, builderForValue.build());
                    onChanged();
                } else {
                    localTimeBuilder_.addMessage(index, builderForValue.build());
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder addAllLocalTime(Iterable<? extends WorldClockProtocol.LocalTime> values) {
                if (localTimeBuilder_ == null) {
                    ensureLocalTimeIsMutable();
                    super.addAll(values, localTime_);
                    onChanged();
                } else {
                    localTimeBuilder_.addAllMessages(values);
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder clearLocalTime() {
                if (localTimeBuilder_ == null) {
                    localTime_ = java.util.Collections.emptyList();
                    bitField0_ = (bitField0_ & ~0x00000001);
                    onChanged();
                } else {
                    localTimeBuilder_.clear();
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public Builder removeLocalTime(int index) {
                if (localTimeBuilder_ == null) {
                    ensureLocalTimeIsMutable();
                    localTime_.remove(index);
                    onChanged();
                } else {
                    localTimeBuilder_.remove(index);
                }
                return this;
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public WorldClockProtocol.LocalTime.Builder getLocalTimeBuilder(int index) {
                return getLocalTimeFieldBuilder().getBuilder(index);
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            @Override
            public WorldClockProtocol.LocalTimeOrBuilder getLocalTimeOrBuilder(int index) {
                if (localTimeBuilder_ == null) {
                    return localTime_.get(index);
                } else {
                    return localTimeBuilder_.getMessageOrBuilder(index);
                }
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            @Override
            public java.util.List<? extends WorldClockProtocol.LocalTimeOrBuilder> getLocalTimeOrBuilderList() {
                if (localTimeBuilder_ != null) {
                    return localTimeBuilder_.getMessageOrBuilderList();
                } else {
                    return java.util.Collections.unmodifiableList(localTime_);
                }
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public WorldClockProtocol.LocalTime.Builder addLocalTimeBuilder() {
                return getLocalTimeFieldBuilder().addBuilder(WorldClockProtocol.LocalTime.getDefaultInstance());
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public WorldClockProtocol.LocalTime.Builder addLocalTimeBuilder(int index) {
                return getLocalTimeFieldBuilder().addBuilder(index, WorldClockProtocol.LocalTime.getDefaultInstance());
            }

            /**
             * <code>repeated .LocalTime localTime = 1;</code>
             */
            public java.util.List<WorldClockProtocol.LocalTime.Builder> getLocalTimeBuilderList() {
                return getLocalTimeFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<WorldClockProtocol.LocalTime, WorldClockProtocol.LocalTime.Builder, WorldClockProtocol.LocalTimeOrBuilder> getLocalTimeFieldBuilder() {
                if (localTimeBuilder_ == null) {
                    localTimeBuilder_ = new RepeatedFieldBuilder<WorldClockProtocol.LocalTime, WorldClockProtocol.LocalTime.Builder, WorldClockProtocol.LocalTimeOrBuilder>(localTime_, ((bitField0_ & 0x00000001) == 0x00000001), getParentForChildren(), isClean());
                    localTime_ = null;
                }
                return localTimeBuilder_;
            }

            // @@protoc_insertion_point(builder_scope:LocalTimes)
        }

        // @@protoc_insertion_point(class_scope:LocalTimes)
    }

    // @@protoc_insertion_point(outer_class_scope)
}
